include("${CMAKE_CURRENT_LIST_DIR}/project_info.cmake")
set( PACKAGE_VERSION_MAJOR ${BRAINVISA_PACKAGE_VERSION_MAJOR} )
set( PACKAGE_VERSION_MINOR ${BRAINVISA_PACKAGE_VERSION_MINOR} )
set( PACKAGE_VERSION_PATCH ${BRAINVISA_PACKAGE_VERSION_PATCH} )
set( PACKAGE_VERSION_TWEAK ${BRAINVISA_PACKAGE_VERSION_TWEAK} )
if( PACKAGE_VERSION_TWEAK )
  set( PACKAGE_VERSION "${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}" )
else( PACKAGE_VERSION_TWEAK )
  set( PACKAGE_VERSION "${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}.${PACKAGE_VERSION_TWEAK}" )
endif( PACKAGE_VERSION_TWEAK )

if( PACKAGE_FIND_VERSION AND NOT PACKAGE_FIND_VERSION_MINOR )
  message( FATAL_ERROR "When requesting a specific version of ${PACKAGE_FIND_NAME}, you must provide at least the major and minor version numbers, e.g., 1.34")
endif( PACKAGE_FIND_VERSION AND NOT PACKAGE_FIND_VERSION_MINOR )

set( PACKAGE_VERSION_COMPATIBLE false )
set( PACKAGE_VERSION_EXACT false )
if( PACKAGE_VERSION_MAJOR EQUAL "${PACKAGE_FIND_VERSION_MAJOR}" AND PACKAGE_VERSION_MINOR EQUAL "${PACKAGE_FIND_VERSION_MINOR}")
  if( PACKAGE_FIND_VERSION_PATCH )
    if( NOT PACKAGE_VERSION_PATCH LESS "${PACKAGE_FIND_VERSION_PATCH}" )
      if( PACKAGE_FIND_VERSION_TWEAK )
        if( NOT PACKAGE_VERSION_TWEAK LESS "${PACKAGE_FIND_VERSION_TWEAK}" )
          set( PACKAGE_VERSION_COMPATIBLE true )
          if( PACKAGE_VERSION_PATCH EQUAL ${PACKAGE_FIND_VERSION_PATCH} AND PACKAGE_VERSION_TWEAK EQUAL ${PACKAGE_FIND_VERSION_TWEAK} )
            set( PACKAGE_VERSION_EXACT true )
          endif( PACKAGE_VERSION_PATCH EQUAL ${PACKAGE_FIND_VERSION_PATCH} AND PACKAGE_VERSION_TWEAK EQUAL ${PACKAGE_FIND_VERSION_TWEAK} )
        endif( NOT PACKAGE_VERSION_TWEAK LESS "${PACKAGE_FIND_VERSION_TWEAK}" )
      else( PACKAGE_FIND_VERSION_TWEAK )
        set( PACKAGE_VERSION_COMPATIBLE true )
        if( PACKAGE_VERSION_PATCH EQUAL ${PACKAGE_FIND_VERSION_PATCH} )
          set( PACKAGE_VERSION_EXACT true )
        endif( PACKAGE_VERSION_PATCH EQUAL ${PACKAGE_FIND_VERSION_PATCH} )
      endif( PACKAGE_FIND_VERSION_TWEAK )
    endif( NOT PACKAGE_VERSION_PATCH LESS "${PACKAGE_FIND_VERSION_PATCH}" )
  else( PACKAGE_FIND_VERSION_PATCH )
    set( PACKAGE_VERSION_COMPATIBLE true )
    set( PACKAGE_VERSION_EXACT true )
  endif( PACKAGE_FIND_VERSION_PATCH )
endif( PACKAGE_VERSION_MAJOR EQUAL "${PACKAGE_FIND_VERSION_MAJOR}" AND PACKAGE_VERSION_MINOR EQUAL "${PACKAGE_FIND_VERSION_MINOR}")
